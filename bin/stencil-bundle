#!/usr/bin/env node

require('colors');

var Fs = require('fs');
var Program = require('commander');
var Path = require('path');
var ThemeConfig = require('../lib/theme-config');
var pkg = require('../package.json');
var themePath = process.cwd();
var configuration;
var bundle;
var Bundle = require('../lib/stencil-bundle');
var stencilConfigFilePath = Path.join(themePath, 'stencil.conf.js');
var themeConfig;
var versionCheck = require('../lib/version-check');

Program
    .version(pkg.version)
    .option('-d, --dest [dest]', 'Where to save the zip file. It defaults to the current directory you are in when bundling')
    .option('-p, --prefix [name]', 'Use prefixes for config.json and .stencil files')
    .option('-n, --name  [filename]', 'What do you want to call the zip file. It defaults to stencil-bundle.zip')
    .option('-m, --marketplace', 'Runs extra bundle validations for partners who can create marketplace themes')
    .parse(process.argv);

if( Program.prefix ) {
  // If the value is true it means that no prefix was passed in.
  if (Program.prefix === true) {
      return console.error('Error: You have to specify a value for -p or --prefix'.red);
  } else {
    themeConfig = ThemeConfig.getInstance(themePath, 'config_' + Program.prefix + '.json');
  }
} else {
  themeConfig = ThemeConfig.getInstance(themePath);
}

if (!versionCheck()) {
    return;
}

if( !themeConfig ) {
  themeConfig = ThemeConfig.getInstance(themePath);
}

if (Program.dest === true) {
    return console.error('Error: You have to specify a value for -d or --dest'.red);
}

if (Program.name === true) {
    return console.error('Error: You have to specify a value for -n or --name'.red);
}

if (!themeConfig.configExists()) {
    return console.error('Error: You must have a '.red + 'config.json'.cyan + ' file in your top level theme directory.');
}

configuration = themeConfig.getRawConfig();

bundle = new Bundle(themePath, themeConfig, configuration, {
    marketplace: Program.marketplace,
    dest: Program.dest,
    name: Program.name,
    prefix: Program.prefix
});

/**
 * Check if file exist syncronous
 * @param  {string} path
 * @return {boolean}
 */
function fileExist(path) {
    try {
        return !!Fs.statSync(path);
    }
    catch (e) {
        return false;
    }
}

bundle.initBundle((err, bundlePath) => {
    if (err) {
        throw err;
    }

    console.log(`Bundled saved to: ${bundlePath.cyan}`);
});
